{"version":3,"file":"browser.js","sources":["../node_modules/@stdlib/constants-float64-ninf/lib/index.js","../node_modules/@stdlib/number-ctor/lib/number.js","../node_modules/@stdlib/math-base-assert-is-negative-zero/lib/main.js","../node_modules/@stdlib/math-base-assert-is-negative-zero/lib/index.js","../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../node_modules/@stdlib/math-base-assert-is-positive-zero/lib/main.js","../node_modules/@stdlib/math-base-assert-is-positive-zero/lib/index.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/index.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js","../lib/minmax.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float64-ninf\n* @type {number}\n*\n* @example\n* var FLOAT64_NINF = require( '@stdlib/constants-float64-ninf' );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar Number = require( '@stdlib/number-ctor' );\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_NINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nmodule.exports = Number; // eslint-disable-line stdlib/require-globals\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar NINF = require( '@stdlib/constants-float64-ninf' );\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is negative zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is negative zero\n*\n* @example\n* var bool = isNegativeZero( -0.0 );\n* // returns true\n*\n* @example\n* var bool = isNegativeZero( 0.0 );\n* // returns false\n*/\nfunction isNegativeZero( x ) {\n\treturn (x === 0.0 && 1.0/x === NINF);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isNegativeZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a double-precision floating-point numeric value is negative zero.\n*\n* @module @stdlib/math-base-assert-is-negative-zero\n*\n* @example\n* var isNegativeZero = require( '@stdlib/math-base-assert-is-negative-zero' );\n*\n* var bool = isNegativeZero( -0.0 );\n* // returns true\n*\n* bool = isNegativeZero( 0.0 );\n* // returns false\n*/\n\n// MODULES //\n\nvar isNegativeZero = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isNegativeZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* var FLOAT64_PINF = require( '@stdlib/constants-float64-pinf' );\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is positive zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is positive zero\n*\n* @example\n* var bool = isPositiveZero( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveZero( -0.0 );\n* // returns false\n*/\nfunction isPositiveZero( x ) {\n\treturn (x === 0.0 && 1.0/x === PINF);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isPositiveZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a double-precision floating-point numeric value is positive zero.\n*\n* @module @stdlib/math-base-assert-is-positive-zero\n*\n* @example\n* var isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );\n*\n* var bool = isPositiveZero( 0.0 );\n* // returns true\n*\n* bool = isPositiveZero( -0.0 );\n* // returns false\n*/\n\n// MODULES //\n\nvar isPositiveZero = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isPositiveZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a double-precision floating-point numeric value is `NaN`.\n*\n* @module @stdlib/math-base-assert-is-nan\n*\n* @example\n* var isnan = require( '@stdlib/math-base-assert-is-nan' );\n*\n* var bool = isnan( NaN );\n* // returns true\n*\n* bool = isnan( 7.0 );\n* // returns false\n*/\n\n// MODULES //\n\nvar isnan = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport NINF from '@stdlib/constants-float64-ninf' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum values.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output object\n* @param {number} x - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {(Array|TypedArray|Object)} minimum and maximum values\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmax( out, 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmax( out, 5.9, 3.14, 4.2 );\n* // returns [ 3.14, 5.9 ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmax( out, 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmax( out, +0.0, -0.0 );\n* // returns [ -0.0, 0.0 ]\n*/\nfunction minmax( out, x, y ) {\n\tvar len;\n\tvar min;\n\tvar max;\n\tvar v;\n\tvar i;\n\n\tlen = arguments.length;\n\tif ( len === 2 ) {\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = x;\n\t\treturn out;\n\t}\n\tif ( len === 3 ) {\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\tout[ 0 ] = NaN;\n\t\t\tout[ 1 ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\tif ( x === y && x === 0.0 ) {\n\t\t\tif ( isNegativeZero( x ) ) {\n\t\t\t\tout[ 0 ] = x;\n\t\t\t\tout[ 1 ] = y;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\tout[ 0 ] = y;\n\t\t\tout[ 1 ] = x;\n\t\t\treturn out;\n\t\t}\n\t\tif ( x < y ) {\n\t\t\tout[ 0 ] = x;\n\t\t\tout[ 1 ] = y;\n\t\t\treturn out;\n\t\t}\n\t\tout[ 0 ] = y;\n\t\tout[ 1 ] = x;\n\t\treturn out;\n\t}\n\tmin = PINF;\n\tmax = NINF;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isnan( v ) ) {\n\t\t\tout[ 0 ] = NaN;\n\t\t\tout[ 1 ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if (\n\t\t\tv === 0.0 &&\n\t\t\tv === min &&\n\t\t\tisNegativeZero( v )\n\t\t) {\n\t\t\tmin = v;\n\t\t}\n\t\tif ( v > max ) {\n\t\t\tmax = v;\n\t\t} else if (\n\t\t\tv === 0.0 &&\n\t\t\tv === max &&\n\t\t\tisPositiveZero( v )\n\t\t) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\tout[ 0 ] = min;\n\tout[ 1 ] = max;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default minmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport compute from './minmax.js' ;\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum values.\n*\n* @param {(Array|TypedArray|Object)} [out] - output object\n* @param {number} x - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {(Array|TypedArray|Object)} minimum and maximum values\n*\n* @example\n* var v = minmax( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmax( out, 5.9, 3.14, 4.2 );\n* // returns [ 3.14, 5.9 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var v = minmax( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var v = minmax( +0.0, -0.0 );\n* // returns [ -0.0, 0.0 ]\n*/\nfunction minmax( out, x, y ) {\n\tvar bool;\n\tvar args;\n\tvar len;\n\tvar i;\n\n\tlen = arguments.length;\n\tif ( len === 1 ) {\n\t\treturn compute( [ 0.0, 0.0 ], out );\n\t}\n\tbool = ( typeof arguments[ 0 ] === 'number' );\n\tif ( len === 2 ) {\n\t\tif ( bool ) {\n\t\t\treturn compute( [ 0.0, 0.0 ], out, x );\n\t\t}\n\t\treturn compute( out, x );\n\t}\n\tif ( len === 3 ) {\n\t\tif ( bool ) {\n\t\t\treturn compute( [ 0.0, 0.0 ], out, x, y );\n\t\t}\n\t\treturn compute( out, x, y );\n\t}\n\tif ( bool ) {\n\t\targs = [];\n\t\targs.push( [ 0.0, 0.0 ] );\n\t\ti = 0;\n\t} else {\n\t\targs = [];\n\t\targs.push( arguments[ 0 ] );\n\t\ti = 1;\n\t}\n\tfor ( ; i < len; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn compute.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default minmax;\n"],"names":["lib","Number","NEGATIVE_INFINITY","NINF","require$$0","x","POSITIVE_INFINITY","PINF","minmax","out","y","len","min","max","v","i","arguments","length","isnan","NaN","isNegativeZero","isPositiveZero","bool","args","compute","push","apply"],"mappings":";6CA2DAA,ECrCiBC,ODgCSC,kBEhCtBC,EAAOC,ECoBXJ,EDDA,SAAyBK,GACxB,OAAc,IAANA,GAAa,EAAIA,IAAMF,GEahCH,EALmBC,OAAOK,kBC5BtBC,EAAOH,ECoBXJ,EDDA,SAAyBK,GACxB,OAAc,IAANA,GAAa,EAAIA,IAAME,GEAhCP,ECNA,SAAgBK,GACf,OAASA,GAAMA,GC2BhB,SAASG,EAAQC,EAAKJ,EAAGK,GACxB,IAAIC,EACAC,EACAC,EACAC,EACAC,EAGJ,GAAa,KADbJ,EAAMK,UAAUC,QAIf,OAFAR,EAAK,GAAMJ,EACXI,EAAK,GAAMJ,EACJI,EAER,GAAa,IAARE,EACJ,OAAKO,EAAOb,IAAOa,EAAOR,IACzBD,EAAK,GAAMU,IACXV,EAAK,GAAMU,IACJV,GAEHJ,IAAMK,GAAW,IAANL,EACVe,EAAgBf,IACpBI,EAAK,GAAMJ,EACXI,EAAK,GAAMC,EACJD,IAERA,EAAK,GAAMC,EACXD,EAAK,GAAMJ,EACJI,GAEHJ,EAAIK,GACRD,EAAK,GAAMJ,EACXI,EAAK,GAAMC,EACJD,IAERA,EAAK,GAAMC,EACXD,EAAK,GAAMJ,EACJI,GAIR,IAFAG,EAAML,EACNM,EAAMV,EACAY,EAAI,EAAGA,EAAIJ,EAAKI,IAAM,CAE3B,GAAKG,EADLJ,EAAIE,UAAWD,IAId,OAFAN,EAAK,GAAMU,IACXV,EAAK,GAAMU,IACJV,GAEHK,EAAIF,GAGF,IAANE,GACAA,IAAMF,GACNQ,EAAgBN,MAJhBF,EAAME,IAQFA,EAAID,GAGF,IAANC,GACAA,IAAMD,GACNQ,EAAgBP,MAJhBD,EAAMC,GAWR,OAFAL,EAAK,GAAMG,EACXH,EAAK,GAAMI,EACJJ,SC5ER,SAAiBA,EAAKJ,EAAGK,GACxB,IAAIY,EACAC,EACAZ,EACAI,EAGJ,GAAa,KADbJ,EAAMK,UAAUC,QAEf,OAAOO,EAAS,CAAE,EAAK,GAAOf,GAG/B,GADAa,EAAmC,iBAAnBN,UAAW,GACd,IAARL,EACJ,OAAKW,EACGE,EAAS,CAAE,EAAK,GAAOf,EAAKJ,GAE7BmB,EAASf,EAAKJ,GAEtB,GAAa,IAARM,EACJ,OAAKW,EACGE,EAAS,CAAE,EAAK,GAAOf,EAAKJ,EAAGK,GAEhCc,EAASf,EAAKJ,EAAGK,GAWzB,IATKY,IACJC,EAAO,IACFE,KAAM,CAAE,EAAK,IAClBV,EAAI,KAEJQ,EAAO,IACFE,KAAMT,UAAW,IACtBD,EAAI,GAEGA,EAAIJ,EAAKI,IAChBQ,EAAKE,KAAMT,UAAWD,IAEvB,OAAOS,EAAQE,MAAO,KAAMH"}